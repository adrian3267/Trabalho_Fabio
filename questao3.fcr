/* adapted from:
 0 = livre
 1 = obstaculo movel
 2 = obstaculo fixo
 robo: x,y
 celulas-alvo: elementos da matriz 'marked'
*/


/* Process */
process play is
	states move, done
    var x1 : 0..6 := 1,
		y1 : 0..6 := 1,
		x2 : 0..6 := 5,
		y2 : 0..6 := 2,
        a : array 7 of array 7 of nat := [[2,2,2,2,2,2,2],
										  [2,3,0,0,2,2,2],
										  [2,0,1,1,0,4,2],
										  [2,1,0,0,1,2,2],
									      [2,0,0,2,0,0,2],
									      [2,2,0,0,0,0,2],
										  [2,2,2,2,2,2,2]],
		marked : array 3 of array 2 of nat := [[3,3], [4,1], [5,5]],
		visited1 : array 7 of array 7 of nat := [[0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0]],

		visited2 : array 7 of array 7 of nat := [[0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0],
												 [0,0,0,0,0,0,0]]
      
    from move
		select
			/* check if done */
			on visited1[3][3] = 1 and visited1[4][1] = 1 and visited1[5][5] = 1 and visited2[3][3] = 1 and visited2[4][1] = 1 and visited2[5][5] = 1; to done
			/* moves */
			[] on a[y1][x1-1]= 0; a[y1][x1-1]:= 3; x1 := x1 - 1; visited1[y1][x1] := 1; to move
			[] on a[y1][x1+1]= 0; a[y1][x1+1]:= 3; x1 := x1 + 1; visited1[y1][x1] := 1; to move
			[] on a[y1-1][x1]= 0; a[y1-1][x1]:= 3; y1 := y1 - 1; visited1[y1][x1] := 1; to move
			[] on a[y1+1][x1]= 0; a[y1+1][x1]:= 3; y1 := y1 + 1; visited1[y1][x1] := 1; to move
			/* pushes */
			[] on a[y1][x1-1]= 1 and a[y1][x1-2]= 0; a[y1][x1-2]:= 1; a[y1][x1-1]:= 3; x1:= x1 - 1; visited1[y1][x1] := 1; to move
			[] on a[y1][x1+1]= 1 and a[y1][x1+2]= 0; a[y1][x1+2]:= 1; a[y1][x1+1]:= 3; x1:= x1 + 1; visited1[y1][x1] := 1; to move
			[] on a[y1-1][x1]= 1 and a[y1-2][x1]= 0; a[y1-2][x1]:= 1; a[y1-1][x1]:= 3; y1:= y1 - 1; visited1[y1][x1] := 1; to move
			[] on a[y1+1][x1]= 1 and a[y1+2][x1]= 0; a[y1+2][x1]:= 1; a[y1+1][x1]:= 3; y1:= y1 + 1; visited1[y1][x1] := 1; to move

			[] on a[y2][x2-1]= 0; a[y2][x2-1]:= 4; x2 := x2 - 1; visited2[y2][x2] := 1; to move
			[] on a[y2][x2+1]= 0; a[y2][x2+1]:= 4; x2 := x2 + 1; visited2[y2][x2] := 1; to move
			[] on a[y2-1][x2]= 0; a[y2-1][x2]:= 4; y2 := y2 - 1; visited2[y2][x2] := 1; to move
			[] on a[y2+1][x2]= 0; a[y2+1][x2]:= 4; y2 := y2 + 1; visited2[y2][x2] := 1; to move
			/* pushes */
			[] on a[y2][x2-1]= 1 and a[y2][x2-2]= 0; a[y2][x2-2]:= 1; a[y2][x2-1]:= 4; x2:= x2 - 1; visited2[y2][x2] := 1; to move
			[] on a[y2][x2+1]= 1 and a[y2][x2+2]= 0; a[y2][x2+2]:= 1; a[y2][x2+1]:= 4; x2:= x2 + 1; visited2[y2][x2] := 1; to move
			[] on a[y2-1][x2]= 1 and a[y2-2][x2]= 0; a[y2-2][x2]:= 1; a[y2-1][x2]:= 4; y2:= y2 - 1; visited2[y2][x2] := 1; to move
			[] on a[y2+1][x2]= 1 and a[y2+2][x2]= 0; a[y2+2][x2]:= 1; a[y2+1][x2]:= 4; y2:= y2 + 1; visited2[y2][x2] := 1; to move
		end

/* Entry point */

play


/* Properties */

property impossible is ltl ([] not (play/state done))
assert impossible

